DAY 1 

1) FIRST UNIQUE CHARACTER IN A STRING IN PYTHON 

//Here our job is to find the first unique character in a given string and return the index of such character if present else return -1.

//Our solution approach here is :
//We are creating a dictionary which stores the frequencies of all the elements.
//And then iterate through the dictionary key,value pairs : if the value is 1 that means it is the unique character, so we return the index of such character
//Even after iterating through all the elements of the dictionary, if we havent find such element then we return -1.

//SOLUTION IN PYTHON


def firstUniqChar(self, s: str) -> int:
        dic={}
        for keys in s:
            dic[keys] = dic.get(keys,0) + 1
        for x,y in dic.items():
            if y==1:
                return s.index(x)
        return -1





2) LONGEST SUBSTRING WITHOUT REPEATING CHARACTERS 

//Here our job is to find the substring of a given string with two conditions that is it should be the longest one which has no repeating characters, that means all the characters in the substring should be unique.

//Our solution approach is:
//Maintain a dictionary which stores all the unique characters
//Maintain two pointers i,j : move j till all the characters upto now are unique and if yes update the maximum length
//If found a repeating character then move the window by removing elements in the dictionary.
//Our output will be the longest substring without repeating characters

//SOLUTION IN PYTHON


def lengthOfLongestSubstring(self, s: str) -> int:
        if s==" ":
            return 1
        elif len(s)==1:
            return 1
        else:
            dic={}
            i=j=0
            res = 0
            while j<len(s):
                dic[s[j]]=dic.get(s[j],0)+1
                if(len(dic)>j-i+1):
                    j+=1
                elif(len(dic)==j-i+1):
                    res=max(res,len(dic))
                    j+=1
                elif(len(dic)<j-i+1):
                    while len(dic)<j-i+1:
                        dic[s[i]]=dic.get(s[i],0)-1
                        if(dic[s[i]]==0):
                            dic.pop(s[i])
                        i+=1
                    j+=1
            return res
            




3)STRING TO INTEGER 

//SOLUTIONIN PYTHON 


    def myAtoi(self, s: str) -> int:
        sign,num,flag=1,0,0
        s=s.strip()
        if len(s)==0:
            return 0
        if s[0] == "-":
            sign = -1
        for i in s:
            if i.isdigit():
                num=num*10+int(i)
                flag=1
            elif(i=="+" or i=="-")and(flag == 0):
                flag = 1
                pass
            else:
                break
        num = num*sign
        if (-2**31<=num<=(2**31)-1): 
            return num
        if num<0:
            return -2**31
        else:
            return 2**31-1
