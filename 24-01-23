DAY 2 

1)BINARY TREE INORDER TRAVERSAL 

//SOLUTION IN JAVA

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ArrayList<Integer> list = new ArrayList<>();
    public List<Integer> inorderTraversal(TreeNode root) {
        TreeNode x=root;
        inorder(x);
        return list;
    }
    public void inorder(TreeNode root){
        if(root==null){
            return ;
        }
        inorder(root.left);
        list.add(root.val);
        inorder(root.right);
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------


2)BiNARY TREE PREORDER TRAVERSAL

//SOLUTION IN JAVA 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ArrayList<Integer> list = new ArrayList<>();
    public List<Integer> preorderTraversal(TreeNode root){
        TreeNode x=root;
        preorder(x);
        return list;
    }
    public void preorder(TreeNode root){
        if(root==null){
            return ;
        }
        list.add(root.val);
        preorder(root.left);
        preorder(root.right);
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

3)BINARY TREE POSTORDER TRAVERSAL 

//SOLUTION IN JAVA 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    ArrayList<Integer> list = new ArrayList<>();
    public List<Integer> postorderTraversal(TreeNode root){
        TreeNode x=root;
        postorder(x);
        return list;
    }
    public void postorder(TreeNode root){
        if(root==null){
            return ;
        }
        postorder(root.left);
        postorder(root.right);
        list.add(root.val);
    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------

4)SAME TREE 

//SOLUTION IN JAVA 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null){
            return true;
        }
        if(q==null || p==null) {
            return false;
        }
        if (p.val != q.val){
            return false;
        }
        return isSameTree(p.right, q.right) && isSameTree(p.left, q.left);
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------

5)MAXIMUM DEPTH OF A BINARY TREE 

//SOLUTION IN JAVA 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int height(TreeNode root){
        if(root==null){
            return 0;
        }
        int left=height(root.left);
        int right=height(root.right);
        return Math.max(left,right)+1;
    }
    public int maxDepth(TreeNode root) {
        TreeNode temp=root;
        return height(temp);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------


6)BINARY TREE PATHS 

//SOLUTION IN JAVA

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String>  list = new ArrayList<>();
        traversal(root,"",list);
        return list;
    }
    public void traversal(TreeNode root,String res,List<String> list){
        if(root==null){
            return;
        }
        if(root.right==null && root.left==null){
            list.add(res+root.val);
        }
        traversal(root.left,res+root.val+"->",list);
        traversal(root.right,res+root.val+"->",list);
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------


7)MINIMUM DEPTH OF A BINARY TREE 

//SOLUTION IN JAVA 


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int height(TreeNode root){
        if(root==null){
            return 0;
        }
        if(root.left==null && root.right==null){
            return 1;
        }
        if(root.left==null){
            return height(root.right)+1;
        }
        if(root.right==null){
            return height(root.left)+1;
        }
        int left=height(root.left);
        int right=height(root.right);
        return Math.min(left,right)+1;
    }
    public int minDepth(TreeNode root) {
        TreeNode temp=root;
        return height(temp);
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------

8)SYMMETRIC TREE 

//SOLUTION IN JAVA 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        return check(root,root);
    }
    public boolean check(TreeNode left,TreeNode right){
        if(right==null && left==null){
            return true;
        }
        if(left==null && right!=null){
            return false;
        }
        if(right==null && left!=null){
            return false;
        }
        if(left.val!=right.val){
            return false;
        }
        boolean check1=check(left.left,right.right);
        if(check1==false){
            return false;
        }
        boolean check2=check(left.right,right.left);
        if(check2==false){
            return false;
        }
        return check1 && check2;
    }
}



