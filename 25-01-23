DAY 3

1)LOWEST COMMON ANCESTOR OF A BINARY TREE 

//SOLUTION IN JAVA

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null){
            return null;
        }
        if(root.val==p.val || root.val==q.val){
            return root;
        }
        TreeNode l=lowestCommonAncestor(root.left,p,q);
        TreeNode r=lowestCommonAncestor(root.right,p,q);
        if(l!=null && r!=null){
            return root;
        }        
        if(l!=null){
            return l;
        }
        if(r!=null){
            return r;
        }
        return null;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2)LOWEST COMMON ANCESTOR OF A BINARY SEARCH TREE 

//SOLUTION IN JAVA 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null){
            return null;
        }
        if(root.val==p.val || root.val==q.val){
            return root;
        }
        if(root.val>p.val && root.val>q.val){
            TreeNode l=lowestCommonAncestor(root.left,p,q);
            return l;
        }
        if(root.val<p.val && root.val<q.val){
            TreeNode r=lowestCommonAncestor(root.right,p,q);
            return r;
        }
        return root;
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3)SUM OF LEFT LEAVES 

//SOLUTION IN JAVA 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int sum=0;
    public void check(TreeNode root){
        if(root==null){
            return ;
        }
        if(root.left!=null){
            if(root.left.left == null && root.left.right == null){
                sum+=root.left.val;
            }
            else{
                check(root.left);
            }
        }
        if(root.right!=null){
            check(root.right);
        }
    }
    public int sumOfLeftLeaves(TreeNode root) {
        if(root==null){
            return 0;
        }
        check(root);
        return sum;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4)SEARCH IN A BINARY SEARCH TREE 

//SOLUTION IN JAVA 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        if(root==null){
            return null;
        }
        if(root.val==val){
            return root;
        }
        if(root.val>val){
            return searchBST(root.left,val);
        }
        if(root.val<val){
            return searchBST(root.right,val);
        } 
        return null;   
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5)
